/*
 * Copyright 1991-1996, Silicon Graphics, Inc.
 * ALL RIGHTS RESERVED
 *
 * UNPUBLISHED -- Rights reserved under the copyright laws of the United
 * States.   Use of a copyright notice is precautionary only and does not
 * imply publication or disclosure.
 *
 * U.S. GOVERNMENT RESTRICTED RIGHTS LEGEND:
 * Use, duplication or disclosure by the Government is subject to restrictions
 * as set forth in FAR 52.227.19(c)(2) or subparagraph (c)(1)(ii) of the Rights
 * in Technical Data and Computer Software clause at DFARS 252.227-7013 and/or
 * in similar or successor clauses in the FAR, or the DOD or NASA FAR
 * Supplement.  Contractor/manufacturer is Silicon Graphics, Inc.,
 * 2011 N. Shoreline Blvd. Mountain View, CA 94039-7311.
 *
 * THE CONTENT OF THIS WORK CONTAINS CONFIDENTIAL AND PROPRIETARY
 * INFORMATION OF SILICON GRAPHICS, INC. ANY DUPLICATION, MODIFICATION,
 * DISTRIBUTION, OR DISCLOSURE IN ANY FORM, IN WHOLE, OR IN PART, IS STRICTLY
 * PROHIBITED WITHOUT THE PRIOR EXPRESS WRITTEN PERMISSION OF SILICON
 * GRAPHICS, INC.
 */
//  -*- C++ -*-

/*
 *
 _______________________________________________________________________
 ______________  S I L I C O N   G R A P H I C S   I N C .  ____________
 |
 |   $Revision: 1.11 $
 |
 |   Description:
 |	This file defines the SoShapeStyleElement class.
 |	It takes values from the following: 
 |	SoDrawStyleElement
 |	SoComplexityTypeElement
 |	SoGLTextureEnabledElement
 |	SoLazyElement
 |	TransparencyType field of SoGLRenderAction
 |	CoordType of SoTextureCoordinateElement
 |	number and value of SoTransparencyElement
 |	isColorIndex from SoGLLazyElement
 |		to determine 
 |	    whether to use fast-path rendering, and
 |	    which fast-path rendering code to use
 |
 |   Author(s)		: Alan Norton,  Gavin Bell
 |
 ______________  S I L I C O N   G R A P H I C S   I N C .  ____________
 _______________________________________________________________________
 */

#ifndef  _SO_SHAPE_STYLE_ELEMENT
#define  _SO_SHAPE_STYLE_ELEMENT

#include <Inventor/elements/SoInt32Element.h>
#include <Inventor/elements/SoLazyElement.h>



//////////////////////////////////////////////////////////////////////////////
//
//  Class: SoShapeStyleElement
//
//  This elements stores some information shapes need to quickly
//  determine whether or not they should render, and, if they should
//  render, how they should render.  Specifically, it stores:
//
//  NeedNormals:   TRUE if lighting is on
//  NeedTexCoords: TRUE if texturing and texcoords not generated by GL
//
//  MightNotRender:  TRUE if:
//           -- bounding box complexity
//           -- invisible drawstyle
//           -- render abort callback registered
//
//////////////////////////////////////////////////////////////////////////////

SoEXTENDER class SoShapeStyleElement : public SoElement {

    SO_ELEMENT_HEADER(SoShapeStyleElement);

  public:

    //
    // API USED BY SHAPES:
    //

    // Get a readable instance:
    static const SoShapeStyleElement *	get(SoState *state);

    // Returns TRUE if shapes may not render for some reason:
    SbBool		mightNotRender() const { return delayFlags; }

    // Returns TRUE if need normals:
    SbBool		needNormals() const { return needNorms; }
    
    // Returns TRUE if need texture coordinates:
    SbBool		needTexCoords() const
	{ return (texEnabled && (!texFunc)); }

    // Returns a mask that can be used by the SoVertexPropertyCache
    // class (see SoVertexProperty.h for the SoRenderInfo class) to
    // quickly mask out the normal or texture coordinate cases if
    // normals or texture coordinates aren't needed.
    int			getRenderCaseMask() const
	{ return renderCaseMask; }

    // API USED BY OTHER ELEMENTS:

    static void		setDrawStyle(SoState *state, int32_t value);
    static void		setComplexityType(SoState *state, int32_t value);
    static void		setTransparencyType(SoState *state, int32_t value);
    static void		setTextureEnabled(SoState *state, SbBool value);
    static void		setTextureFunction(SoState *state, SbBool value);
    static void		setLightModel(SoState *state, int32_t value);
    // Set value is TRUE if either diffuse, transparency, or materialbinding
    // are overridden; otherwise FALSE.
    static void		setOverrides(SoState *state, SbBool value);
   
    static SbBool	isScreenDoor(SoState *state);

  SoINTERNAL public:
    SbBool	isTextureFunction() const
	{return texFunc;}
    virtual void	init(SoState *state);
    virtual SbBool	matches(const SoElement *elt) const;
    virtual void	push(SoState *state);
    virtual SoElement	*copyMatchInfo() const;
    static void		initClass();
    virtual void	print(FILE *fp) const;

  protected:
    virtual		~SoShapeStyleElement();

  private:
    int			delayFlags; // True if rendering might be delayed
    SbBool		needNorms;
    SbBool		texEnabled, texFunc;
    int			renderCaseMask;
};

#endif /* _SO_SHAPE_STYLE_ELEMENT */
