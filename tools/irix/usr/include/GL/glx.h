#ifndef __GLX_glx_h__
#define __GLX_glx_h__

/*
** Copyright 1991-2003, Silicon Graphics, Inc.
** All Rights Reserved.
** 
** This is UNPUBLISHED PROPRIETARY SOURCE CODE of Silicon Graphics, Inc.;
** the contents of this file may not be disclosed to third parties, copied or
** duplicated in any form, in whole or in part, without the prior written
** permission of Silicon Graphics, Inc.
** 
** RESTRICTED RIGHTS LEGEND:
** Use, duplication or disclosure by the Government is subject to restrictions
** as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
** and Computer Software clause at DFARS 252.227-7013, and/or in similar or
** successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
** rights reserved under the Copyright Laws of the United States.
*/

#include <X11/Xlib.h>
#include <X11/Xutil.h>
#include <X11/Xmd.h>
#include <GL/gl.h>
#include <GL/glxtokens.h>

#ifdef __cplusplus
extern "C" {
#endif

#define GLX_VERSION_1_1 1
#define GLX_VERSION_1_2 1
#define GLX_VERSION_1_3 1
#define GLX_VERSION_1_4 1

/*
** GLX resources.
*/
typedef XID GLXContextID;
typedef XID GLXPixmap;
typedef XID GLXDrawable;
typedef XID GLXVideoSourceSGIX;
typedef XID GLXFBConfigIDSGIX;
typedef XID GLXPbufferSGIX;
typedef XID GLXWindow;	
typedef XID GLXPbuffer;
typedef XID GLXFBConfigID;

/*
** GLXContext is a pointer to opaque data.
*/
typedef struct __GLXcontextRec *GLXContext;

/*
** GLXFBConfig is a pointer to opaque data.
*/
typedef struct __GLXFBConfigRec *GLXFBConfigSGIX;
typedef struct __GLXFBConfigRec *GLXFBConfig;


/* GLX type defs for hyperpipes 
 */

typedef struct {
           char  pipeName[GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX];
                          /* The string identifies a pipe uniquely
                           * and is of the form ":display.screen"
                           */
            int  networkId;
                          /* identifies a unique physical hyperpipe
                           * network
                           */
} GLXHyperpipeNetworkSGIX;

typedef struct {
            char pipeName[GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX];  /* String */
            int channel; /* channel number associated with the display pipe */
            unsigned int participationType;
                               /* This is a bitmask describing the
                                * attributes of a participating pipe.
                                * The bitmask may contain one or more
                                * of the following attributes:
                                * GLX_HYPERPIPE_DISPLAY_PIPE
                                * GLX_HYPERPIPE_RENDERING_PIPE
                                */
            int timeSlice;
                               /* The timeSlice is ignored if the
                                * participationType is
                                * GLX_HYPERPIPE_DISPLAY_PIPE only.
                                */
} GLXHyperpipeConfigSGIX;

typedef struct {
  char pipeName[GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX];
                   /* Which pipe, in the form ":display.screen"
                    */
  int srcXOrigin;  /* source is specified in managed area */
  int srcYOrigin;  /* coordinates (pixels) */
  int srcWidth;
  int srcHeight;

  int destXOrigin; /* destination is specified in output */
  int destYOrigin; /* channel display coordinates */
  int destWidth;
  int destHeight;

} GLXPipeRect;

typedef struct {
  char pipeName[GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX];
  int XOrigin; /* pixels in managed area */
  int YOrigin;
  int maxHeight;
  int maxWidth;
} GLXPipeRectLimits;

/*
** GLX Events
*/
typedef struct {
    int type;
    unsigned long serial;	/* # of last request processed by server */
    Bool send_event;		/* true if this came for SendEvent request */
    Display *display;		/* display the event was read from */
    GLXDrawable drawable;	/* i.d. of Drawable */
    int event_type;		/* GLX_DAMAGED_SGIX or GLX_SAVED_SGIX */
    int draw_type;		/* GLX_WINDOW_SGIX or GLX_PBUFFER_SGIX */
    unsigned int mask;		/* mask indicating which buffers are affected*/
    int x, y;
    int width, height;
    int count;			/* if nonzero, at least this many more */
} GLXBufferClobberEventSGIX;

typedef struct {
    unsigned long serial;	/* # of last request processed by server */
    Bool send_event;		/* event was generated by a SendEvent request */
    Display *display;		/* display the event was read from */
    GLXDrawable drawable;	/* XID of Drawable */
    int event_type;		/* GLX_DAMAGED or GLX_SAVED */
    int draw_type;		/* GLX_WINDOW or GLX_PBUFFER */
    unsigned int buffer_mask;	/* mask indicating which buffers are affected */
    unsigned int aux_buffer;	/* which aux buffer was affected */
    int x, y;
    int width, height;
    int count;			/* if nonzero, at least this many more */
} GLXPbufferClobberEvent;

typedef union __GLXEvent {
    GLXBufferClobberEventSGIX glxbufferclobber;
    GLXPbufferClobberEvent glxpbufferclobber;
    long pad[24];
} GLXEvent;


/************************************************************************/
/* 
** NOTE: the space between the entry point name and "(" is significant
** to the auto-generated enum building method used by ogldebug.
*/

extern XVisualInfo * glXChooseVisual (Display *dpy, int screen, int *attribList);
extern void glXCopyContext (Display *dpy, GLXContext src, GLXContext dst, unsigned long mask);
extern GLXContext glXCreateContext (Display *dpy, XVisualInfo *vis, GLXContext shareList, Bool direct);
extern GLXPixmap glXCreateGLXPixmap (Display *dpy, XVisualInfo *vis, Pixmap pixmap);
extern void glXDestroyContext (Display *dpy, GLXContext ctx);
extern void glXDestroyGLXPixmap (Display *dpy, GLXPixmap pix);
extern int glXGetConfig (Display *dpy, XVisualInfo *vis, int attrib, int *value);
extern GLXContext glXGetCurrentContext (void);
extern GLXDrawable glXGetCurrentDrawable (void);
extern Bool glXIsDirect (Display *dpy, GLXContext ctx);
extern Bool glXMakeCurrent (Display *dpy, GLXDrawable drawable, GLXContext ctx);
extern Bool glXQueryExtension (Display *dpy, int *errorBase, int *eventBase);
extern Bool glXQueryVersion (Display *dpy, int *major, int *minor);
extern void glXSwapBuffers (Display *dpy, GLXDrawable drawable);
extern void glXUseXFont (Font font, int first, int count, int listBase);
extern void glXWaitGL (void);
extern void glXWaitX (void);
extern const char * glXGetClientString (Display *dpy, int name);
extern const char * glXQueryServerString (Display *dpy, int screen, int name);
extern const char * glXQueryExtensionsString (Display *dpy, int screen );

/*
** commands supported in GLX 1.3
*/
extern GLXDrawable glXGetCurrentReadDrawable (void);
extern GLXFBConfig * glXGetFBConfigs (Display *dpy, int screen, int *nelements);
extern GLXFBConfig * glXChooseFBConfig (Display *dpy, int screen, int *attribList, int *nitems);
extern int glXGetFBConfigAttrib (Display *dpy, GLXFBConfig config, int attribute, int *value);
extern XVisualInfo * glXGetVisualFromFBConfig (Display *dpy, GLXFBConfig config);
extern GLXPixmap glXCreatePixmap (Display *dpy, GLXFBConfig config, Pixmap pixmap, int *attrib_list);
extern void glXDestroyPixmap (Display *dpy, GLXPixmap pix);
extern GLXContext glXCreateNewContext (Display *dpy,  GLXFBConfig config, int render_type, GLXContext share_list, Bool direct);
extern int glXQueryContext (Display *dpy, GLXContext ctx, int attribute, int *value);
extern Bool glXMakeContextCurrent (Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext gc);
extern GLXPbuffer glXCreatePbuffer (Display *dpy, GLXFBConfig config, int *attrib_list);
extern void glXDestroyPbuffer (Display *dpy, GLXPbuffer pbuf);
extern void glXQueryDrawable (Display *dpy, GLXDrawable draw, int attribute, unsigned int *value);
extern void glXSelectEvent (Display *dpy, GLXDrawable drawable, unsigned long event_mask);
extern void glXGetSelectedEvent (Display *dpy, GLXDrawable drawable, unsigned long *event_mask);
extern GLXWindow glXCreateWindow (Display *dpy, GLXFBConfig config, Window win, int *attrib_list);
extern void glXDestroyWindow (Display *dpy, GLXWindow win);

/************************************************************************/

/*
** GLX extensions
*/

/*
** Video Sync extension
*/
extern int glXGetVideoSyncSGI (unsigned int *count);
extern int glXWaitVideoSyncSGI (int divisor, int remainder, unsigned int *count);

/*
** Swap Control extension
*/
extern int glXSwapIntervalSGI (int interval);

/*
** MakeCurrentRead extension
*/
extern Bool glXMakeCurrentReadSGI (Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext gc);
extern GLXDrawable glXGetCurrentReadDrawableSGI (void);

/*
** Dynamic Channel Resizing extension
**
*/
extern int glXBindChannelToWindowSGIX (Display *dpy, int screen, int channel, Window window);
extern int glXQueryChannelDeltasSGIX (Display *dpy, int screen, int channel, int *dx, int *dy, int *dw, int *dh);
extern int glXChannelRectSGIX (Display *dpy, int screen, int channel, int x, int y, int w, int h);
extern int glXQueryChannelRectSGIX (Display *dpy, int screen, int channel, int *x, int *y, int *w, int *h);
extern int glXChannelRectSyncSGIX (Display *dpy, int screen, int channel, GLenum synctype);

/* 
** Hyperpipe Group Extension
*/

extern GLXHyperpipeNetworkSGIX * glXQueryHyperpipeNetworkSGIX (Display * dpy, int *npipes);

extern int glXHyperpipeConfigSGIX (Display *dpy, int networkId, int npipes, GLXHyperpipeConfigSGIX *cfg, int *hpId);

extern int glXDestroyHyperpipeConfigSGIX (Display *dpy, int hpId);

extern GLXHyperpipeConfigSGIX * glXQueryHyperpipeConfigSGIX (Display *dpy, int hpId, int *npipes);

extern int glXBindHyperpipeSGIX (Display *dpy, int hpId);

extern int glXQueryHyperpipeBestAttribSGIX (Display *dpy, int timeSlice, int attrib, int size, void *attribList, void *returnAttribList);

extern int glXQueryHyperpipeAttribSGIX (Display *dpy, int timeSlice, int attrib, int size, void *returnAttribList);

extern int glXHyperpipeAttribSGIX (Display *dpy, int timeSlice, int attrib, int size, void *attribList);

#if defined(_VL_H_)
/*
** Video Source extension
*/
extern GLXVideoSourceSGIX glXCreateGLXVideoSourceSGIX (Display *dpy, int screen, VLServer svr, VLPath path, int nodeClass, VLNode node);
extern void glXDestroyGLXVideoSourceSGIX (Display *dpy, GLXVideoSourceSGIX videosource);
#endif

/* 
** ImportContext extension
*/
extern int glXQueryContextInfoEXT (Display *dpy, GLXContext ctx, int attribute, int *value);
extern Display * glXGetCurrentDisplayEXT (void);
extern Display * glXGetCurrentDisplay (void);
extern GLXContextID glXGetContextIDEXT (const GLXContext gc);
extern GLXContext glXImportContextEXT (Display *dpy, GLXContextID contextID);
extern void glXFreeContextEXT (Display *dpy, GLXContext gc);
extern GLXDrawable glXGetCurrentDrawableEXT (void);

#pragma optional glXGetCurrentDrawableEXT

/*
** FBConfig (Frame Buffer Configuration) extension
*/
extern int glXGetFBConfigAttribSGIX (Display *dpy, GLXFBConfigSGIX config, int attribute, int *value);
extern GLXFBConfigSGIX * glXChooseFBConfigSGIX (Display *dpy, int screen, int *attrib_list, int *nitems);
extern GLXPixmap glXCreateGLXPixmapWithConfigSGIX (Display *dpy, GLXFBConfigSGIX config, Pixmap pixmap);
extern GLXContext glXCreateContextWithConfigSGIX (Display *dpy,  GLXFBConfigSGIX config, int render_type, GLXContext share_list, Bool direct);
extern XVisualInfo * glXGetVisualFromFBConfigSGIX (Display *dpy, GLXFBConfigSGIX config);
extern GLXFBConfigSGIX glXGetFBConfigFromVisualSGIX (Display *dpy, XVisualInfo *vis);


/*
** GLX 1.4
*/
extern void (* glXGetProcAddress    (const GLubyte *procName))( void );
extern void (* glXGetProcAddressARB (const GLubyte *procName))( void );

#pragma optional glXGetProcAddress
#pragma optional glXGetProcAddressARB

/*
** Pbuffer (Pixel Buffer) extension
*/
extern GLXPbufferSGIX glXCreateGLXPbufferSGIX (Display *dpy, GLXFBConfigSGIX config, unsigned int width, unsigned int height, int *attrib_list);
extern void glXDestroyGLXPbufferSGIX (Display *dpy, GLXPbufferSGIX pbuf);
extern int glXQueryGLXPbufferSGIX (Display *dpy, GLXPbufferSGIX pbuf, int attribute, unsigned int *value);
extern void glXSelectEventSGIX (Display *dpy, GLXDrawable drawable, unsigned long mask);
extern void glXGetSelectedEventSGIX (Display *dpy, GLXDrawable drawable, unsigned long *mask);

#if defined(_DM_BUFFER_H_)
/*
** Digital Media Pbuffer extension
*/
extern Bool glXAssociateDMPbufferSGIX (Display *dpy, GLXPbufferSGIX pbuffer, DMparams *params, DMbuffer dmbuffer); 
#endif

/*
** Swap Group extension
*/
extern void glXJoinSwapGroupSGIX (Display *dpy, GLXDrawable drawable, GLXDrawable member);

/*
** Swap Barrier extension
*/
extern void glXBindSwapBarrierSGIX (Display *dpy, GLXDrawable drawable, int barrier);
extern Bool glXQueryMaxSwapBarriersSGIX (Display *dpy, int screen, int *max);
/************************************************************************/

#ifdef __GL_FUTURE
#include "GL/glxfuture.h"
#endif /*__GL_FUTURE*/

#ifdef __cplusplus
}
#endif

#endif /* !__GLX_glx_h__ */
